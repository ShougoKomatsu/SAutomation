SAutomation（本ソフトウェア）は、小松翔悟（作者）が個人の趣味で制作したものであり、このソフトを使ったことにより発生した、いかなる損害に対しても、作者は責任を負いません。
また、作者は本ソフトウェアのソースコードに関する著作権は放棄していません。流用等の相談はGithubコミュニティから行ってください。

本ソフトウェアは、マウス操作、キーボード操作等を自動化するソフトウェアです。
ホットキー登録でマクロを実行します。異なる種類のマクロを同時起動させることは可能ですが、相互作用（Ctrlキー押しっぱなしコマンド等）による誤作動に注意してください。
キーボード入力コマンドでホットキーと一致するものがあれば、たぶん起動してしまいます。
一応、スロットごとに多重起動しないようにしています。スロットを分けると当然ながら多重起動します。
本ソフトウェアより優先されるホットキー（Windows Explorer等）や、本ソフトウェアに横取りされる普段使いのショートカットキーに注意してください。つまり、Ctrl＋sは本ソフトウェアのホットキーとして登録しない方が無難です。


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

利用可能なコマンド

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
●キーボード入力
英数記号一文字, F1～F16, Ctrl, Shift, Alt, Tab, Space, Enter, BackSpace, PageDown, PageUp, Home, End, PrintScreen
←, <-, left, ↑, up, →, ->, right, ↓, down
Jp: 全角/半角切り替え

KeyDown(キー名)
KeyUp(キー名)
KeyDownUp(キー名)

例：
KeyDown(Alt)
KeyDownUp(Tab)
KeyUp(Alt)

----------------
旧コマンド非推奨
Down, Up
を付けると押しっぱなしになる
例：

Alt Down
Tab
Alt Up

----------------------------------------------------------------------------
Input(文字列)

文字列がASCII文字以外の場合は、変換関連の処理が入るので注意が必要
""で囲われた場合、""の外側の空白文字' ', '\t', '　'は無視される。"が一つだけの場合はエラーになる。"を入力する場合は""で囲った中にする必要がある。

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
●キーボード入力待ち
WaitKey(キー名, On/Off, タイムアウトミリ秒)
WaitEitherKey(タイムアウトミリ秒,キー名, On時のジャンプ先ラベル, キー名, On時のジャンプ先ラベル, ...)


----------------
旧コマンド非推奨
Wait キー On
Wait キー Off

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
●ウェイト
二桁以上の数字

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
●マウス操作
SetOriginToWindow(ウインドウ名(部分一致))
ウィンドウ名に"Desktop"を指定すると原点が(0, 0)にリセットされる。
ウィンドウの移動に合わせた自動更新はされないので、必要に応じて再実行すること。

----------------------------------------------------------------------------
SetOriginToImage(ファイル名, 探索領域左上X, 探索領域左上Y, 探索領域右下X, 探索領域右下X)
画像の移動に合わせた自動更新はされないので、必要に応じて再実行すること。

ファイル名: 文字列。ファイルパスもしくはMacro\Model内のファイル名
探索領域: 整数

----------------------------------------------------------------------------
MouseLClick(X, Y)
MouseLDown(X, Y)
MouseLUp(X, Y)
MouseRClick(X, Y)
MouseRDown(X, Y)
MouseRUp(X, Y)
MouseMClick(X, Y)
MouseMDown(X, Y)
MouseMUp(X, Y)

MousePos(X, Y)
MousePosIncl(X, Y)
Wheel(整数)

X, Y: 整数
現在の位置で動作
MouseLClick
MouseLDown
MouseLUp
MouseRClick
MouseRDown
MouseRUp
MouseMClick
MouseMDown
MouseMUp
MousePosToItem(整数変数名or整数値)
最前面ウィンドウの指定IDの中心にマウスカーソルを移動させる

----------------------------------------------------------------------------
旧コマンド使用非推奨
LMouse Click(整数, 整数)
LMouse Down(整数, 整数)
LMouse Up(整数, 整数)
RMouse Click(整数, 整数)
RMouse Down(整数, 整数)
RMouse Up(整数, 整数)
MMouse Click(整数, 整数)
MMouse Down(整数, 整数)
MMouse Up(整数, 整数)

LMouse Click
LMouse Down
LMouse Up
RMouse Click
RMouse Down
RMouse Up
MMouse Click
MMouse Down
MMouse Up
Wheel 整数
旧コマンド使用非推奨

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
●ウィンドウ操作
Maximize
Minimaize
Windowforward(ウインドウ名(部分一致))
WindowPos(整数, 整数)
WindowSize(整数, 整数)
Run(実行ファイルのパス)

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
●実行制御
Escキーで中断。くり返しも止まる。
Ctrl+Shift+Space押下中停止
Ctrl+Shift+Sでステップ送り

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
●画像処理
読み込みできる画像は24bitビットマップフォーマットのみ。圧縮やカラーパレットには対応していない。

SetOriginToWindow(ウインドウ名(部分一致))
Desktopを指定するとリセットされる。
自動更新はされないので、必要に応じて再実行すること。

----------------------------------------------------------------------------
原点座標移動
SetOriginToImage(ファイル名, 探索領域左上X, 探索領域左上Y, 探索領域右下X, 探索領域右下X)
自動更新はされないので、必要に応じて再実行すること。
ファイル名: 文字列。ファイルパスもしくはMacro\Model内のファイル名
探索領域: 整数

----------------------------------------------------------------------------
画像待ち
WaitImage(ファイル名, 探索領域左上X, 探索領域左上Y, 探索領域右下X, 探索領域右下X, on/off, タイムアウト時間)
ファイル名: 文字列。ファイルパスもしくはMacro\Model内のファイル名
探索領域: 整数
タイムアウト時間: 整数。省略もしくは-1指定で無限待ち
タイムアウトでエラー処理。
_mask.bmpが存在するとき、色差が_mask.bmpの各点の値以下の場合は一致しているとみなす。

----------------------------------------------------------------------------
画像位置へのマウス移動
MousePosToImage(ファイル名, 探索領域左上X, 探索領域左上Y, 探索領域右下X, 探索領域右下X)
ファイル名: 文字列。ファイルパスもしくはMacro\Model内のファイル名
探索領域: 整数
見つからないとエラー処理。
_mask.bmpが存在するとき、色差が_mask.bmpの各点の値以下の場合は一致しているとみなす。

----------------------------------------------------------------------------
画像更新待ち
WaitUpdate(更新確認間隔, 範囲左上X, 範囲左上Y, 範囲右下X, 範囲右下Y, on/off, タイムアウト時間)
更新確認間隔: 整数(ミリ秒)
範囲: 整数
タイムアウト時間: 整数(ミリ秒)。省略もしくは-1指定で無限待ち
タイムアウトでエラー処理。

----------------------------------------------------------------------------
色待ち
WaitColor(RGB, 下限, 上限, 座標X, 座標Y, on/off, タイムアウト時間)
WaitColor(RGB, 下限, 上限, 左上座標X, 左上座標Y, 右下座標X, 右下座標Y, on/off, タイムアウト時間)
RGB: 文字列(R, G, B)
上限/下限: 整数
座標: 整数
タイムアウト時間: 整数(ミリ秒)。省略もしくは-1指定で無限待ち

----------------------------------------------------------------------------
スクリーンショット画像保存
ScreenShot(ファイルパス)
screenshotForeGroundWindow(ファイルパス)
ファイルパス: 文字列
ファイルフォーマットは24bitビットマップのみ

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
●フロー制御
・ラベル設定
文字列:

----------------------------------------------------------------------------
・ラベルにジャンプ
GoTo ラベル

----------------------------------------------------------------------------
・エラー時処理設定
OnError GoTo ラベル
OnError GoTo 0
OnError Resume Next
----------------------------------------------------------------------------
・キー入力による分岐
SwitchByInput(メッセージ, タイムアウト時間, ラベル１（デフォルト）, ラベル１に飛ぶキー, ラベル２, ラベル２に飛ぶキー, ...追加可能)
メッセージ: 文字列 
タイムアウト時間: 整数(-1で無限待ち)
ラベル: 文字列
ラベルに飛ぶキー: 文字列

----------------------------------------------------------------------------
・終了
Exit
----------------------------------------------------------------------------
Call サブルーチン名
Exit

Sub サブルーチン名
処理
End sub

サブルーチンから別のサブルーチンを呼び出すことができる。最大1024レベル

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
変数機能

整数型変数: VarInt1～VarInt8
文字列型変数: VarStr1～VarStr8
画像型変数: VarImg1～VarImg8
領域型変数: VarObj1～VarObj8
座標型変数: VarPoint1～VarPoint8

-----------------------------------
画像処理


画像型変数 = Decompose3(画像型変数, 文字列型変数);
R, G, B

領域型変数 = Threshold(画像型変数, 整数型変数, 整数型変数)
領域型変数 = SortRegion(領域型変数, 文字列型変数, 文字列型変数);
Area, Row, Column
Asc, Dsc

領域型変数 = SelectObj(領域型変数, 整数型変数);

領域型変数 = GenRectangle1(整数型変数, 整数型変数, 整数型変数, 整数型変数);

画像型変数 = ReduceDomain(画像型変数, 領域型変数)

領域型変数 = SelectShape(領域型変数, 文字列型変数, 整数型変数, 整数型変数);
Area, Row, Column

領域型変数 = Connection(領域型変数, 整数型変数)
4, 8

座標型変数 = ObjectCenter(領域型変数)




変数名
VarInt1～VarInt8
整数変数名 = AddInt(整数変数名, 整数変数名or整数値) // +=
整数変数名 = SubInt(整数変数名, 整数変数名or整数値) // -=
整数変数名 = MultInt(整数変数名, 整数変数名or整数値) // *=
整数変数名 = DivInt(整数変数名, 整数変数名or整数値) // /=
AreEqualInt(整数変数名, 整数変数名or整数値, ジャンプ先ラベル)
Compare(整数変数名or整数値, < / <= / = / <> / > / =>, 整数変数名or整数値, ジャンプ先ラベル)
整数変数名 = DlgItem(文字列変数名or文字列, 整数変数名or整数値) // 最前面ウィンドウのダイアログアイテムのID取得。第二引数は同名のアイテムがあった場合の順位指定。０が最上位。

VarStrt1～VarStr8
文字列変数名 = StrCombine(文字列変数名or文字列, 文字列変数名or文字列) //変数結合
文字列変数名 = Int2Str(整数変数名or整数値, 文字列変数名or文字列) //文字列変換
文字列変数名 = NowDateTime(文字列変数名or文字列) //現在時刻文字変換
文字列変数名 = ForegroundWindowName //アクティブウィンドウ名
文字列変数名 = ForegroundWindowClassName //アクティブウィンドウ名
AreEqualStr(文字列変数名, 文字列変数名or文字列, ジャンプ先ラベル)
文字列変数名 = Left(文字列変数名or文字列, 整数変数名or整数値)
文字列変数名 = Right(文字列変数名or文字列, 整数変数名or整数値)
文字列変数名 = Mid(文字列変数名or文字列, 整数変数名or整数値, 整数変数名or整数値)
文字列変数名 = ClipBoard //クリップボードからコピー
ClipBoard = 文字列変数名 //クリップボードにコピー

ファイルから画像読み込み画像型変数に代入する
VarImg1～VarImg8
画像変数名=文字列変数名or文字列

画面全体のスクリーンショットを撮り画像型変数に代入する
画像変数名=ScreenShot

画像切り出し画像型変数に代入する
画像変数名=CropImage(画像変数名, 範囲左上X, 範囲左上Y, 範囲右下X, 範囲右下Y)
ClipBoard = 画像変数名 //クリップボードにコピー


範囲: 整数

画像型変数をファイルに保存する
WriteImage(画像変数名, ファイルパス)

変数内容メッセージボックス表示
MsgBox(文字列変数名or整数型変数名)

画像変数の情報を取得し整数型変数に代入する
整数型変数名=画像型変数名.Width
整数型変数名=画像型変数名.Height
整数型変数名=画像型変数名.Value(座標X, 座標Y, RGB)
整数型変数名=画像型変数名.Value(平均範囲左上座標X, 平均範囲左上座標Y, 平均範囲右下座標X, 平均範囲右下座標Y, RGB)
座標: 整数
RGB: R, G, B

